name: Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust
        run: rustup update

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Install MSIX Packaging Tool
        run: |
          Invoke-WebRequest -Uri "https://aka.ms/msixpackagingtool" -OutFile "msixpackagingtool.msix"
          Add-AppxPackage -Path "msixpackagingtool.msix"

      - name: Extract Version from Cargo.toml
        id: version
        shell: pwsh
        run: |
          $version = Select-String -Path Cargo.toml -Pattern '^version\s*=\s*"(.*?)"' | ForEach-Object { $_.Matches.Groups[1].Value }
          echo "Extracted version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Build
        run: cargo build --release

      - name: Copy AppxManifest.xml
        shell: pwsh
        run: Copy-Item -Path AppxManifest.xml -Destination target/release

      - name: Locate MakeAppx.exe
        id: locate_makeappx
        shell: pwsh
        run: |
          $makeappxPath = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter "MakeAppx.exe" | Where-Object { $_.FullName -like "*x64*" } | Select-Object -First 1 -ExpandProperty FullName
          if (-not $makeappxPath) {
            Write-Error "MakeAppx.exe not found!"
            exit 1
          }
          echo "Found MakeAppx.exe at: $makeappxPath"
          echo "makeappx_path=$makeappxPath" >> $env:GITHUB_OUTPUT

      - name: Package MSIX
        shell: pwsh
        run: |
          $makeappx_exe = "${{ steps.locate_makeappx.outputs.makeappx_path }}"
          & $makeappx_exe pack /d target/release /p target/release/CapsWitch-installer.msix

      - name: Decode Certificate
        shell: pwsh
        run: |
          # Decode the Base64 string into a .pfx file
          $certBase64 = "${{ secrets.CERTIFICATE_PFX }}"
          $certBytes = [System.Convert]::FromBase64String($certBase64)
          [System.IO.File]::WriteAllBytes("certificate.pfx", $certBytes)

      - name: Locate signtool.exe
        id: locate_signtool
        shell: pwsh
        run: |
          $signtoolPath = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter "signtool.exe" | Where-Object { $_.FullName -like "*x64*" } | Select-Object -First 1 -ExpandProperty FullName
          if (-not $signtoolPath) {
            Write-Error "signtool.exe not found!"
            exit 1
          }
          echo "Found signtool.exe at: $signtoolPath"
          echo "signtool_path=$signtoolPath" >> $env:GITHUB_OUTPUT

      - name: Sign the Executable
        shell: pwsh
        run: |
          $password = "${{ secrets.CERTIFICATE_PASSWORD }}"
          & "${{ steps.locate_signtool.outputs.signtool_path }}" sign /f "certificate.pfx" /t http://timestamp.digicert.com /fd SHA256 /p $password "target/release/CapsWitch.exe"
          & "${{ steps.locate_signtool.outputs.signtool_path }}" sign /f "certificate.pfx" /t http://timestamp.digicert.com /fd SHA256 /p $password "target/release/CapsWitch-installer.msix"

      - name: Sign the binaries with Cosign
        run:
          cosign sign-blob -y --output-signature
          target/release/CapsWitch.exe.sig target/release/CapsWitch.exe

      - name: Upload the binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: |
            target/release/CapsWitch-installer.msix
            target/release/CapsWitch.exe
            target/release/CapsWitch.exe.sig
            certificate.crt
